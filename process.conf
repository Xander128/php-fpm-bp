[www]
; Choose how the process manager will control the number of child processes.
pm = dynamic

; At any time, there can be no more than 5 child processes.
; If you know how much memory each process consumes regularly
; and how much free memory you have on your system, this is how
; you set a "hard limit" on the amount of memory php-fpm will
; be able to consume.
pm.max_children = 5
 
; When php-fpm first starts, how many processes should
; it immediately generate to handle requests?
; When you restart php-fpm, there may be an influx of requests.
; Spawning a new process can take time (albeit very small), so we want
; to go ahead and have this many ready to go.
pm.start_servers = 2
 
; If there are no requests currently, how many spare
; processes should we always make sure to keep around?
; Again, there is a delay in spawning new processes,
; so having a few always ready to go is a good idea.
; The offset is that they will be taking up memory that your system
; might otherwise be able to use for other things.
pm.min_spare_servers = 1
 
; The inverse of the former. If there's nothing going on,
; how many spare processes are we allowed to keep around?
; Again, fewer means more memory on the system for other things,
; but more means less of a delay if an influx of requests comes in.
pm.max_spare_servers = 3

; The number of requests each child process should execute before respawning.
; This can be useful to work around memory leaks in 3rd party libraries. For
; endless request processing specify '0'. Equivalent to PHP_FCGI_MAX_REQUESTS.
; Default Value: 0
;pm.max_requests = 500
